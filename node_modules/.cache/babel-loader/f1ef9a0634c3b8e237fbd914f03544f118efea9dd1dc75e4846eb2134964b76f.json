{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-8dc7cce2\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"between-flex d-todolist\"\n};\nconst _hoisted_2 = {\n  class: \"flex\"\n};\nconst _hoisted_3 = [\"checked\", \"onClick\"];\nconst _hoisted_4 = {\n  id: \"todo\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_font_awesome_icon = _resolveComponent(\"font-awesome-icon\");\n  return _openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.store.state.todos, (todo, n) => {\n    return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"input\", {\n      checked: $data.store.state.todos[n].isComplete,\n      onClick: $event => $options.middle(n),\n      class: \"checkmark\",\n      id: \"myCheck\",\n      type: \"checkbox\"\n    }, null, 8 /* PROPS */, _hoisted_3), _createElementVNode(\"p\", _hoisted_4, _toDisplayString(todo.todo), 1 /* TEXT */)]), _createElementVNode(\"div\", null, [_createCommentVNode(\" <button class=\\\"btn-del\\\" >Delete</button> \"), _createVNode(_component_font_awesome_icon, {\n      onClick: $event => $data.store.dispatch('removetodo', n),\n      icon: ['fas', 'circle-xmark'],\n      style: {\n        \"height\": \"18px\",\n        \"cursor\": \"pointer\"\n      }\n    }, null, 8 /* PROPS */, [\"onClick\"]), _createCommentVNode(\" <button class=\\\"btn-upd\\\" @click=\\\"updatetodo(n)\\\">Update</button> \")])]);\n  }), 256 /* UNKEYED_FRAGMENT */);\n}","map":{"version":3,"mappings":";;;EACSA,KAAK,EAAC;AAAyB;;EAC3BA,KAAK,EAAC;AAAM;;;EAEVC,EAAE,EAAC;AAAM;;;2BAHpBC,oBAUMC,6BAVmDC,WAAK,CAACC,KAAK,CAACC,KAAK,GAA7BC,IAAI,EAAEC,CAAC;yBAApDN,oBAUM,OAVNO,UAUM,GATFC,oBAGM,OAHNC,UAGM,GAFFD,oBAAoH;MAA5GE,OAAO,EAAER,WAAK,CAACC,KAAK,CAACC,KAAK,CAACE,CAAC,EAAEK,UAAU;MAAGC,OAAK,YAAEC,eAAM,CAACP,CAAC;MAAGR,KAAK,EAAC,WAAW;MAACC,EAAE,EAAC,SAAS;MAACe,IAAI,EAAC;yCACzGN,oBAAgC,KAAhCO,UAAgC,mBAAhBV,IAAI,CAACA,IAAI,oBAE7BG,oBAIM,cAHFQ,mEAAiD,EACjDC,aAAqIC;MAAjHN,OAAK,YAAEV,WAAK,CAACiB,QAAQ,eAAeb,CAAC;MAAIc,IAAI,EAAE,uBAAuB;MAAEC,KAAsC,EAAtC;QAAA;QAAA;MAAA;0CAC5FL,2FAAuE","names":["class","id","_createElementBlock","_Fragment","$data","state","todos","todo","n","_hoisted_1","_createElementVNode","_hoisted_2","checked","isComplete","onClick","$options","type","_hoisted_4","_createCommentVNode","_createVNode","_component_font_awesome_icon","dispatch","icon","style"],"sourceRoot":"","sources":["/home/amirrezatm/Desktop/Amirreza-tm86.github.io-master/front-end/src/components/Home.vue"],"sourcesContent":["<template>\n    <div class=\"between-flex d-todolist\" v-for=\"(todo, n) in store.state.todos\">\n        <div class=\"flex\">\n            <input :checked=\"store.state.todos[n].isComplete\" @click=\"middle(n)\" class=\"checkmark\" id=\"myCheck\" type=\"checkbox\">\n            <p id=\"todo\">{{ todo.todo }}</p>\n        </div>\n        <div>\n            <!-- <button class=\"btn-del\" >Delete</button> -->\n            <font-awesome-icon @click=\"store.dispatch('removetodo', n)\" :icon=\"['fas', 'circle-xmark']\" style=\"height: 18px; cursor: pointer;\" />\n            <!-- <button class=\"btn-upd\" @click=\"updatetodo(n)\">Update</button> -->\n        </div>\n    </div>\n</template>\n\n<script>\nimport { useStore } from 'vuex'\nimport workoutFormVue from './workoutForm.vue'\n\nexport default {\n    name: 'navVue',\n    components: {\n        workoutFormVue\n    },\n    data() {\n        const store = useStore()\n        if (localStorage.getItem('todo')) {\n            store.dispatch('todo')\n        }\n        return {\n            store,\n        }\n    },\n    methods: {\n        showinput: function () {\n            return this.store.state.showinp = !this.store.state.showinp\n        },\n        middle: function (x) {\n            const list = document.getElementById(\"todo\");\n            this.store.state.todos[x] = ({ todo: this.store.state.todos[x].todo, isComplete: this.store.state.todos[x].isComplete = !this.store.state.todos[x].isComplete })\n            const parsed = JSON.stringify(this.store.state.todos)\n            localStorage.setItem('todo', parsed)\n            for (var i = 0; i < list.length; ++i) {\n                list[i].classList.toggle('checked');\n            }\n        },\n        updatetodo: function (x) {\n            document.getElementById(\"todo\").value = this.store.state.todos[x].todo\n            console.log(document.getElementById(\"todo\").value);\n            if (this.store.state.newtodo) {\n                this.store.state.todos[x] = ({ todo: this.store.state.newtodo, isComplete: false })\n                const parsed = JSON.stringify(this.store.state.todos)\n                localStorage.setItem('todo', parsed)\n                this.store.state.newtodo = ''\n            }\n        }\n    }\n}\n</script>\n\n<style scoped>\n@import url('../Style/style.css');\n\n.flex {\n    display: flex;\n}\n\nspan {\n    font-size: 11px;\n    color: black;\n}\n\ninput[type=checkbox]:checked+p {\n    text-decoration: line-through;\n    background-color: blue;\n}\n\ninput[type=\"checkbox\"]::before {\n    content: \"\";\n    width: 1.4rem;\n    height: 1.4rem;\n    clip-path: polygon(20% 0%, 0% 20%, 30% 50%, 0% 80%, 20% 100%, 50% 70%, 80% 100%, 100% 80%, 70% 50%, 100% 20%, 80% 0%, 50% 30%);\n    transform: scale(0);\n    background-color: green;\n  }\n  \n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}